// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecases/get_temperature_by_cep.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecases/get_temperature_by_cep.go -destination ./internal/usecases/mocks/get_temperature_by_cep.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	usecases "github.com/danielzinhors/cloudrun_go/internal/usecases"
	gomock "go.uber.org/mock/gomock"
)

// MockGetTemperatureByCepUseCase is a mock of GetTemperatureByCepUseCase interface.
type MockGetTempUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetTempUseCaseMockRecorder
}

// MockGetTemperatureByCepUseCaseMockRecorder is the mock recorder for MockGetTemperatureByCepUseCase.
type MockGetTempUseCaseMockRecorder struct {
	mock *MockGetTempUseCase
}

// NewMockGetTemperatureByCepUseCase creates a new mock instance.
func NewMockGetTempUseCase(ctrl *gomock.Controller) *MockGetTempUseCase {
	mock := &MockGetTempUseCase{ctrl: ctrl}
	mock.recorder = &MockGetTempUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetTempUseCase) EXPECT() *MockGetTempUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetTempUseCase) Execute(ctx context.Context, input *usecases.TempInput) (*usecases.TempOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, input)
	ret0, _ := ret[0].(*usecases.TempOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetTempUseCaseMockRecorder) Execute(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetTempUseCase)(nil).Execute), ctx, input)
}
